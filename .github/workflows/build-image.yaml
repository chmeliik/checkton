name: Build Image
on:
  push:
    branches:
      - main
    tags:
      - image/v*

env:
  REGISTRY: ghcr.io
  SCOPED_NAME: ${{ github.repository }}  # owner/repo_name
  IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      packages: write
      contents: read

    outputs:
      versioned_image: ${{ steps.tag.outputs.versioned_image }}
      digest: ${{ steps.push.outputs.digest }}

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Build image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: Dockerfile
          image: ${{ env.IMAGE }}
          tags: |
            ${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0
        with:
          image: ${{ env.IMAGE }}:${{ github.sha }}
          format: cyclonedx-json
          output-file: .sbom.json
          upload-artifact: false
          upload-release-assets: false

      - name: Login to registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        id: push
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          registry: ${{ env.REGISTRY }}
          image: ${{ env.SCOPED_NAME }}
          tags: |
            ${{ github.sha }}

      - name: Generate image attestation
        uses: actions/attest-build-provenance@534b352d658f90498fd148d231fdbf88f3886a3a # v1
        with:
          subject-name: ${{ env.IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Generate SBOM attestation
        uses: actions/attest-sbom@91d05efbc376a456f8abf965e8929c5c04ece8af # v1
        with:
          subject-name: ${{ env.IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: .sbom.json
          push-to-registry: true

      - name: Tag with release version
        if: ${{ startsWith(github.ref, 'refs/tags/image-v') }}
        id: tag
        run: |
          #!/bin/bash
          set -e

          version=${GITHUB_REF#refs/tags/image-}
          skopeo copy "docker://$IMAGE:$GITHUB_SHA" "docker://$IMAGE:$version"
          echo "versioned_image=$IMAGE:$version" >> "$GITHUB_OUTPUT"

  # If the image gets tagged with a release version, automatically bump it in the action.yaml
  bump-image:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/image-v') }}
    needs: [build]
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Bump image ref in action.yaml
        env:
          VERSIONED_IMAGE: ${{ needs.build.outputs.versioned_image }}
          DIGEST: ${{ needs.build.outputs.digest }}
          GH_TOKEN: ${{ github.token }}
        run: |
          #!/bin/bash
          set -e

          image_with_digest=${VERSIONED_IMAGE}@${DIGEST}
          sed -E "s;(\s*)image: .*;\1image: $image_with_digest;" -i action.yaml

          if [[ -z "$(git diff)" ]]; then
              exit
          fi

          git config --global user.name "checkton-bot"
          git config --global user.email "<checkton-bot@noreply.org>"

          version=${VERSIONED_IMAGE##*:}  # extract the tag
          git checkout -b "selfupdate/$version"

          msg="action.yaml: update image to $version"

          cat <<- EOF > /tmp/body.txt
          Update the action image to \`$image_with_digest\`.

          You may wish to verify that this image is legit:

          \`\`\`
          gh attestation verify --repo $GITHUB_REPOSITORY oci://$image_with_digest
          \`\`\`
          EOF

          git add action.yaml
          git commit -m "$msg"

          git push -f --set-upstream origin "selfupdate/$version"
          gh pr create --title "$msg" --body-file /tmp/body.txt
